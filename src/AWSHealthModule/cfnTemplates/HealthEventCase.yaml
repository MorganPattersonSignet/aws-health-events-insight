---
AWSTemplateFormatVersion: '2010-09-09'
Description: Lambda Function to Open a Support Case

Resources:
  HealthEventSupportCase:
    Type: 'AWS::Lambda::Function'
    Properties:
      Handler: index.lambda_handler
      Role: !GetAtt HealthEventMockRole.Arn
      Code:
        ZipFile: |
            import boto3
            import datetime
            import cfnresponse
            def lambda_handler(event, context):
              try:
                aws_account_id = context.invoked_function_arn.split(":")[4]
                current_time = datetime.datetime.now()
                support_client = boto3.client('support')
                
                event_start_time = (current_time + datetime.timedelta(hours=12)).strftime('%Y-%m-%d %H:%M UTC')
                event_end_time = (current_time + datetime.timedelta(hours=24)).strftime('%Y-%m-%d %H:%M UTC')
                
                communication_body = f"Hello \nCan you please send a mock PHD event to this account?\nAccountId: {aws_account_id}\nEvent Region: us-east-1\nEvent Start Time: {event_start_time}\nEvent End Time: {event_end_time}\nEvent Category: EC2 Service Event"

                response = support_client.create_case(
                    subject=f"Heidi mock event request for {aws_account_id}",
                    serviceCode="aws-health",
                    severityCode="low",
                    categoryCode="general-guidance",
                    communicationBody=communication_body)
                cfnresponse.send(event, context, cfnresponse.SUCCESS, {}, None)
              except Exception as e:
                cfnresponse.send(event, context, cfnresponse.FAILED, {}, None)
      Runtime: python3.10
      Timeout: 60
      ReservedConcurrentExecutions: 5

  HealthEventMockRole:
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W11
            reason: "Support needs * resource in permissions"
          - id: W58
            reason: "Lambda has required permission to write CloudWatch Logs"
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyName: LambdaExecutionPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                Resource: !Sub "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:*"
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !Sub "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*"
              - Effect: Allow
                Action:
                  - 'support:CreateCase'
                Resource: '*'
  MyLambdaInvoker:
    Type: Custom::MyLambdaInvoker
    Properties:
      ServiceToken: !GetAtt HealthEventSupportCase.Arn