---
AWSTemplateFormatVersion: '2010-09-09'
Description: (AwsHealthEvents) Stack to create dataset and GlueTables for AwsHealthEvents

Parameters:
  # S3 Bucket for ingestion
  DataCollectionBucket:
    Type: String
    Description: S3 Bucket Where Kinesis creates health data
  ConfigAggregatorBucket:
    Type: String
    Description: S3 Bucket where Config data is aggregated
  QuicksightServiceRole:
    Type: String
    Default: aws-quicksight-service-role-v0
    Description: The Quicksight Service role attached to QS, Default is aws-quicksight-service-role-v0
 
Resources:
  # AWS Glue Database resource to store the Athena table and view
  GlueDatabaseDataCollection:
    Type: AWS::Glue::Database
    Properties:
      CatalogId: !Sub '${AWS::AccountId}'
      DatabaseInput:
        Name: awshealtheventdb
        Description: AWSHealthEventDB

  GlueTableAccountMap:
  # AWS Glue Table resource representing the AWS Account table map
    Type: AWS::Glue::Table
    Properties:
      DatabaseName: !Ref GlueDatabaseDataCollection
      CatalogId: !Sub '${AWS::AccountId}'
      TableInput:
        Name: awshealtheventaccinfo
        Description: AWS Health Event Account Data
        Parameters:
          skip.header.line.count: '1'
        TableType: EXTERNAL_TABLE
        StorageDescriptor:
          Columns:
            - { Name: accountid, Type: string }
            - { Name: arn, Type: string }
            - { Name: email, Type: string }
            - { Name: name, Type: string }
            - { Name: status, Type: string }
            - { Name: joinedmethod, Type: string }
            - { Name: joinedtimestamp, Type: string }
            - { Name: Tag, Type: string }
          Location: !Sub 's3://${DataCollectionBucket}/DataCollection-metadata/AWSHealthModule/accountinfo-metadata/'
          InputFormat: org.apache.hadoop.mapred.TextInputFormat
          OutputFormat: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat
          SerdeInfo:
            SerializationLibrary: org.apache.hadoop.hive.serde2.OpenCSVSerde
            Parameters:
              separatorChar: ","
              quoteChar: "\""
              escapeChar: "\\"
              columns: "accountid,arn,email,name,status,joinedmethod,joinedtimestamp"
        PartitionKeys: []

  GlueConfigTable:
  # AWS Glue Table resource representing the Config External Table
    Type: AWS::Glue::Table
    Properties:
      DatabaseName: !Ref GlueDatabaseDataCollection
      CatalogId: !Sub '${AWS::AccountId}'
      TableInput:
        Name: awsconfigdata
        Description: 'AWS Config Data'
        Owner: GlueTeam
        PartitionKeys:
          - Name: date_created
            Type: string
          - Name: awsregion
            Type: string
          - Name: awsaccountid
            Type: string
        Parameters:
          EXTERNAL: 'TRUE'
          storage.location.template: !Join ['', ['s3://', !Ref ConfigAggregatorBucket, '/AWSLogs/${awsaccountid}/Config/${awsregion}/${date_created}/ConfigSnapshot']]
        StorageDescriptor:
          Columns:
            - Name: fileversion
              Type: string
            - Name: configsnapshotid
              Type: string
            - Name: configurationitems
              Type: array<struct<configurationItemVersion:string,configurationItemCaptureTime:string,configurationStateId:bigint,awsAccountId:string,configurationItemStatus:string,resourceType:string,resourceId:string,resourceName:string,ARN:string,awsRegion:string,availabilityZone:string,configurationStateMd5Hash:string,configuration:string,supplementaryConfiguration:map<string,string>,tags:map<string,string>,resourceCreationTime:string>>
          Location: !Sub 's3://${ConfigAggregatorBucket}/AWSLogs'
          InputFormat: 'org.apache.hadoop.mapred.TextInputFormat'
          OutputFormat: 'org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat'
          SerdeInfo:
            SerializationLibrary: 'org.openx.data.jsonserde.JsonSerDe'
            Parameters:
              paths: 'fileversion,configsnapshotid,configurationitems'
          Compressed: false
        TableType: EXTERNAL_TABLE
        Retention: 30

  
  GlueHealthTable:
  # AWS Glue Table resource representing  AWS Health External Table
    Type: AWS::Glue::Table
    Properties:
      # Reference to the AWS Glue Database
      DatabaseName: !Ref GlueDatabaseDataCollection
      CatalogId: !Sub '${AWS::AccountId}'
      TableInput:
        Name: awshealthevent
        Description: 'AWS Health Events Data'
        Owner: GlueTeam
        PartitionKeys:
          - Name: date_created
            Type: string
          - Name: source_partition 
            Type: string
        Parameters:
          EXTERNAL: 'TRUE'  # 'EXTERNAL' should be a string
          projection.enabled: 'true'
          projection.date_created.type: 'date'
          projection.date_created.format: 'yyyy/MM/dd'
          projection.date_created.interval: '1'
          projection.date_created.interval.unit: 'DAYS'
          projection.date_created.range: '2021/01/01,NOW'
          projection.source_partition.type: 'enum'
          projection.source_partition.values: 'awshealthtest,aws.health'
          storage.location.template: !Join ['', ['s3://', !Ref DataCollectionBucket, '/DataCollection-data/${source_partition}/${date_created}/']]
        StorageDescriptor:
          # Columns and their data types for the table
          Columns:
            - Name: version
              Type: string
              Comment: 'from deserializer'
            - Name: id
              Type: string
              Comment: 'from deserializer'
            - Name: detail-type
              Type: string
              Comment: 'from deserializer'
            - Name: source
              Type: string
              Comment: 'from deserializer'
            - Name: account
              Type: string
              Comment: 'from deserializer'
            - Name: time
              Type: string
              Comment: 'from deserializer'
            - Name: region
              Type: string
              Comment: 'from deserializer'
            - Name: resources
              Type: array<string>
              Comment: 'from deserializer'
            - Name: detail
              Type: struct<eventarn:string,service:string,eventscopecode:string,communicationid:string,lastupdatedtime:string,eventregion:string,eventtypecode:string,eventtypecategory:string,starttime:string,endtime:string,eventdescription:array<struct<language:string,latestdescription:string>>,affectedentities:array<struct<entityvalue:string,entityarn:string,entityaz:string,entitytags:array<struct<value:string,key:string>>>>>
              Comment: 'from deserializer'
          # S3 location of the data for the Athena External Table
          Location: !Sub 's3://${DataCollectionBucket}/DataCollection-data'
          InputFormat: 'org.apache.hadoop.mapred.TextInputFormat'
          OutputFormat: 'org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat'
          SerdeInfo:
            SerializationLibrary: 'org.openx.data.jsonserde.JsonSerDe'
            Parameters:
              paths: 'account,detail,detail-type,id,region,resources,source,time,version'
          Compressed: false
        TableType: EXTERNAL_TABLE
        Retention: 30

  QuicksightServiceRolePolicy:
  # Create an AWS IAM Managed Policy for QuickSight service role with necessary permissions     
    Type: AWS::IAM::ManagedPolicy
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W13
            reason: "Requires generic access for QS to list all buckets"
    Properties:
      Description: "Grants Amazon QuickSight to run awshealthevent federated query"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Action:
              - s3:ListAllMyBuckets
            Resource: "*"
          - Effect: "Allow"
            Action:
              - "s3:GetBucketLocation"
              - "s3:GetObject"
              - "s3:ListBucket"
              - "s3:ListBucketMultipartUploads"
              - "s3:AbortMultipartUpload"
              - "s3:PutObject"
              - "s3:ListMultipartUploadParts"
              - "s3:CreateBucket"
            Resource: 
              - !Sub arn:${AWS::Partition}:s3:::${DataCollectionBucket}
              - !Sub arn:${AWS::Partition}:s3:::${DataCollectionBucket}/*
              - !Sub arn:${AWS::Partition}:s3:::aws-athena-query-results-*
              - !Sub arn:${AWS::Partition}:s3:::aws-athena-query-results-*/*
          - Effect: "Allow"
            Action:
              - "s3:GetObject"
              - "s3:ListBucket"
            Resource: 
              - !Sub arn:${AWS::Partition}:s3:::${ConfigAggregatorBucket}
              - !Sub arn:${AWS::Partition}:s3:::${ConfigAggregatorBucket}/*
          - Effect: "Allow"
            Action:
              - athena:BatchGetQueryExecution
              - athena:CancelQueryExecution
              - athena:GetCatalogs
              - athena:GetExecutionEngine
              - athena:GetExecutionEngines
              - athena:GetNamespace
              - athena:GetNamespaces
              - athena:GetQueryExecution
              - athena:GetQueryExecutions
              - athena:GetQueryResults
              - athena:GetQueryResultsStream
              - athena:GetTable
              - athena:GetTables
              - athena:ListQueryExecutions
              - athena:RunQuery
              - athena:StartQueryExecution
              - athena:StopQueryExecution
              - athena:ListWorkGroups
              - athena:ListEngineVersions
              - athena:GetWorkGroup
              - athena:GetDataCatalog
              - athena:GetDatabase
              - athena:GetTableMetadata
              - athena:ListDataCatalogs
              - athena:ListDatabases
              - athena:ListTableMetadata
            Resource: "*"
          - Effect: "Allow"
            Action:
              - "glue:CreateDatabase"
              - "glue:DeleteDatabase"
              - "glue:GetDatabase"
              - "glue:GetDatabases"
              - "glue:UpdateDatabase"
              - "glue:CreateTable"
              - "glue:DeleteTable"
              - "glue:BatchDeleteTable"
              - "glue:UpdateTable"
              - "glue:GetTable"
              - "glue:GetTables"
              - "glue:BatchCreatePartition"
              - "glue:CreatePartition"
              - "glue:DeletePartition"
              - "glue:BatchDeletePartition"
              - "glue:UpdatePartition"
              - "glue:GetPartition"
              - "glue:GetPartitions"
              - "glue:BatchGetPartition"
            Resource:
              - "*"
          - Effect: "Allow"
            Action:
              - "lakeformation:GetDataAccess"
            Resource:
              - "*"
      Roles: 
       - !Ref QuicksightServiceRole

  HeidiGluePartitionUpdateLambdaPolicy:
    Condition: ConfigAggregatorBucket
    Type: AWS::IAM::ManagedPolicy
    Properties:
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - sts:AssumeRole
            Resource: !Sub "arn:${AWS::Partition}:iam::${AWS::AccountId}:role/HeidiGluePartitionUpdateLambda-Role"
      Roles: 
       - !Ref QuicksightServiceRole

  DataSource:
  # Create an AWS QuickSight DataSource for DataCollection
    Type: AWS::QuickSight::DataSource
    Properties:
      DataSourceId: !Sub "DataSource-${AWS::AccountId}-${AWS::Region}"
      AwsAccountId: !Sub ${AWS::AccountId}
      Name: !Sub "DataSource-${AWS::AccountId}-${AWS::Region}"
      Type: ATHENA
      DataSourceParameters:
        AthenaParameters:
          WorkGroup: primary
      SslProperties:
        DisableSsl: false

Outputs:
  DataSourceArn:
    Value: !GetAtt DataSource.Arn
    Export:
      Name: DataSourceArn
  GlueConfigTable:
    Value: !Ref GlueConfigTable
    Export:
      Name: GlueConfigTable
  GlueDatabaseDataCollection:
    Value: !Ref GlueDatabaseDataCollection
    Export:
      Name: GlueDatabaseDataCollection

Conditions:
  ConfigAggregatorBucket: !Not [!Equals [!Ref ConfigAggregatorBucket, "N"]]