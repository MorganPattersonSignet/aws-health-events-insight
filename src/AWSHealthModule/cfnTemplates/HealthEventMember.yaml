---
AWSTemplateFormatVersion: "2010-09-09"
Description: (AWSHealthEvent) Child stack for awshealthevent collection from other member accounts and regions
Parameters:
  DataCollectionBusArn:
    Type: String
    Description: Primary Event Health Bus Arn(Get it from  DataCollectionRootStack)
  BackfillEvents:
    Default: "Y"
    Type: String
    Description: (Optional) Backfill health events Y/N.
  EventDetailUrl:
    Type: String
    Default: https://test
    Description: (Optional) This is to create dependency on AWSHealthEventDetailUrl Stack, so that DynamoDB can populate with backfill events.


Resources:
  PutEventRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: events.amazonaws.com
            Action: sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: !Sub "HealthEventPutEvent-${AWS::AccountId}-${AWS::Region}-Policy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: "events:PutEvents"
                Resource: 
                  - !Ref DataCollectionBusArn

  DefaultBusRule:
    Type: "AWS::Events::Rule"
    Properties:
      Description: "EventBridge default rule for aws.health events"
      EventBusName: "default"
      EventPattern:
        source:
          - "aws.health"
          - "awshealthtest"
          - "aws.config"
      Targets:
        - Arn: !Ref DataCollectionBusArn
          Id: "EventHealthBusTarget"
          RoleArn: !GetAtt PutEventRole.Arn

  #This is one time execution of lamnda to backfill the events
  LambdaBackfillEventsRole:
    Condition: BackfillEvents
    DependsOn: DefaultBusRule
    Type: AWS::IAM::Role
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W11
            reason: "Health API required Resource *"
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: cloudwatch-logs-access
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                Resource: !Sub "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:*"
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !Sub "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*"
        - PolicyName: Healthapiaccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - health:DescribeEvents
                  - health:DescribeEventDetails
                  - health:DescribeAffectedEntities
                Resource: "*"
        - PolicyName: PutEventtoDefaultBus-access
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - "events:PutEvents"
                Resource: !Sub "arn:${AWS::Partition}:events:${AWS::Region}:${AWS::AccountId}:event-bus/default"
                
  LambdaBackfillEvents: 
    Condition: BackfillEvents             
    Type: AWS::Lambda::Function
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W58
            reason: "Given AWSLambdaBasicExecutionRole and allows Cloudwatch"
    Properties:
      Code:
          ZipFile: |
            import boto3
            import json
            from datetime import datetime
            import os
            import cfnresponse

            health_client = boto3.client('health')
            eventbridge_client = boto3.client('events')

            def get_events():
                events = []
                next_token = None
                try:
                    while True:
                        kwargs = {}
                        if next_token and len(next_token) >= 4:
                            kwargs['nextToken'] = next_token
                        events_response = health_client.describe_events(filter={}, **kwargs)
                        events += events_response['events']
                        if 'nextToken' in events_response:
                            next_token = events_response['nextToken']
                        else:
                            break
                    return events
                except Exception as e:
                    print(e)
                    return []

            def get_event_data(event_details, event_description):
                event_data = {
                    'eventArn': event_details['arn'],
                    'eventRegion': event_details.get('region', ''),
                    'eventTypeCode': event_details.get('eventTypeCode', ''),
                    'startTime': event_details.get('startTime').strftime('%a, %d %b %Y %H:%M:%S GMT'),
                    'eventDescription': [{'latestDescription': event_description['latestDescription']}]
                }
                # Check if 'timefield' exists in event_details before including it in event_data
                if 'endTime' in event_details:
                    event_data['endTime'] = event_details['endTime'].strftime('%a, %d %b %Y %H:%M:%S GMT')

                if 'lastUpdatedTime' in event_details:
                    event_data['lastUpdatedTime'] = event_details['lastUpdatedTime'].strftime('%a, %d %b %Y %H:%M:%S GMT')

                event_data.update((key, value) for key, value in event_details.items() if key not in event_data)
                print(event_data)

                return event_data

            def send_event_defaultBus(event_data):
                # Send the event to EventBridge
                eventbridge_client.put_events(
                    Entries=[
                        {
                            'Source': 'awshealthtest',
                            'DetailType': 'awshealthtest',
                            'Detail': json.dumps(event_data),
                            'EventBusName': 'default'
                        }
                    ]
                )

            def lambda_handler(event, context):
                events = get_events()
                try:
                    for awsevent in events:
                        event_details_response = health_client.describe_event_details(eventArns=[awsevent['arn']])
                        event_affected_response = health_client.describe_affected_entities(filter={'eventArns': [awsevent['arn']]})
                        entities = event_affected_response['entities']
                        entity_values = ', '.join([entity['entityValue'] for entity in entities])
                        successful_set_details = event_details_response.get('successfulSet')
                        if not successful_set_details:
                            continue
                        
                        event_details = successful_set_details[0]['event']
                        event_details['affectedEntities'] = [{'entityValue':entity_values}]
                        event_description = successful_set_details[0]['eventDescription']
                        event_data = get_event_data(event_details, event_description)
                        send_event_defaultBus(event_data)
                    cfnresponse.send(event, context, cfnresponse.SUCCESS, {}, None)
                except Exception as e:
                    cfnresponse.send(event, context, cfnresponse.FAILED, {}, None)
                    print(e)

      Handler: index.lambda_handler
      Runtime: python3.10
      ReservedConcurrentExecutions: 5
      Timeout: 900
      Role: !GetAtt LambdaBackfillEventsRole.Arn

  MyLambdaInvoker:
    Condition: BackfillEvents
    Type: Custom::MyLambdaInvoker
    Properties:
      ServiceToken: !GetAtt LambdaBackfillEvents.Arn

Conditions:
  BackfillEvents: !Equals [!Ref BackfillEvents, "Y"]