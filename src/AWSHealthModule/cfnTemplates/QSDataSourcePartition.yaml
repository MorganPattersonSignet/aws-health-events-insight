---
AWSTemplateFormatVersion: '2010-09-09'
Description: (AwsHealthEvents) Stack to Lambda stack to update partitions

Parameters:
  DataCollectionBusArn:
    Type: String
    Description: Primary Event Health Bus Arn(Get it from  DataCollectionRootStack)
  GlueConfigTable:
    Type: String
    Description: Glue Config table, get from QSDataSource Stack
  GlueDatabaseDataCollection:
    Type: String
    Description: Glue Database, get from QSDataSource Stack
  ConfigAggregatorBucket:
    Type: String
    Description: S3 Bucket where Config data is aggregated

Resources:
  GluePartitionUpdateLambdaRole:
  # IAM Role for the Lambda function to access other AWS services to add partitions 
    Type: AWS::IAM::Role
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W11
            reason: "Requires for query execution and create/delete paritions"
          - id: W28
            reason: "Hardcoded name to pass to config bucket"
          - id: W58
            reason: "Lambda has required permission to write CloudWatch Logs"
    Properties:
      RoleName: !Sub GluePartitionUpdateLambda-${AWS::AccountId}-${AWS::Region}-Role
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole 
      Policies:
        - PolicyName: cloudwatch-logsAccess-Policy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                Resource: !Sub "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:*"
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !Sub "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*"
        - PolicyName: GetEventAccess-Policy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - "events:GetEvents"
                Resource: !Ref DataCollectionBusArn
        - PolicyName: BucketAccess-policy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: "Allow"
                Action:
                  - "s3:GetBucketLocation"
                  - "s3:GetObject"
                  - "s3:ListBucket"
                  - "s3:ListBucketMultipartUploads"
                  - "s3:AbortMultipartUpload"
                  - "s3:PutObject"
                  - "s3:ListMultipartUploadParts"
                  - "s3:CreateBucket"
                Resource: 
                  - !Sub arn:${AWS::Partition}:s3:::aws-athena-query-results-*
                  - !Sub arn:${AWS::Partition}:s3:::aws-athena-query-results-*/*
              - Effect: "Allow"
                Action:
                  - "s3:GetObject"
                  - "s3:ListBucket"
                Resource: 
                  - !Sub arn:${AWS::Partition}:s3:::${ConfigAggregatorBucket}
                  - !Sub arn:${AWS::Partition}:s3:::${ConfigAggregatorBucket}/*
        - PolicyName: GlueTables-Athena-policy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: "Allow"
                Action:
                  - athena:StartQueryExecution
                  - athena:GetQueryExecution
                  - "glue:GetTable"
                  - "glue:GetTables"
                  - "lakeformation:GetDataAccess"
                  - "glue:BatchCreatePartition"
                  - "glue:BatchDeletePartition"
                Resource:
                  - "*"
            
  GluePartitionUpdateLambda:
  # Lambda Function to add Glue partitions
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          import datetime
          import re
          import boto3
          import os

          # Constants
          TableName = os.environ['GlueConfigTable']
          DatabaseName = os.environ['GlueDatabaseDataCollection']

          # Initialize global variables
          athena = boto3.client('athena')
          sts = boto3.client('sts')
          LatestPartition = 'latest'

          def handler(event, context):
              object_key = event['detail']['s3ObjectKey']
              bucket_name = event['detail']['s3Bucket']
              accountId = event['account']
              region = event['region']

              if check_s3_object_permission(bucket_name, object_key):
                  object_key_parent = f"s3://{bucket_name}/{os.path.dirname(object_key)}"
                  try:
                      print(f"dropping partition")
                      drop_partition(accountId, region, LatestPartition)
                  except Exception as e:
                      print(f"Error while dropping partition")
                      print(e)
                  try:
                      print(f"Adding partition")
                      add_partition(accountId, region, LatestPartition, object_key_parent)
                  except Exception as e:
                      print(f"Error while Adding partition")
                      print(e)
                  return
              else:
                  print("Something went wrong")

          def check_s3_object_permission(s3_bucket, s3_key):
              s3_client = boto3.client('s3')
              try:
                  s3_client.head_object(Bucket=s3_bucket, Key=s3_key)
                  return True
              except Exception as e:
                  print(e)
                  return False

          def add_partition(accountId, region, partition_name, object_key_parent):
              execute_query(f"ALTER TABLE {TableName} ADD PARTITION (awsaccountid = '{accountId}', awsregion = '{region}', date_created = '{partition_name}') LOCATION '{object_key_parent}'")
            
          def drop_partition(accountId, region, partition_name):
              execute_query(f"ALTER TABLE {TableName} DROP PARTITION (awsaccountid = '{accountId}', awsregion = '{region}', date_created = '{partition_name}')")

          def execute_query(query):
              query_output_location = 's3://aws-athena-query-results-{account_id}-{region}'.format(account_id=sts.get_caller_identity().get('Account'),region=os.environ['AWS_REGION'])
              start_query_response = athena.start_query_execution(QueryString=query,QueryExecutionContext={'Database': DatabaseName},ResultConfiguration={'OutputLocation': query_output_location})
              is_query_running = True
              
              while is_query_running:
                  get_query_execution_response = athena.get_query_execution(QueryExecutionId=start_query_response['QueryExecutionId'])
                  query_state = get_query_execution_response['QueryExecution']['Status']['State']
                  is_query_running = query_state in ('RUNNING', 'QUEUED')
                  
                  if not is_query_running and query_state != 'SUCCEEDED':
                      print(get_query_execution_response)
                      raise Exception('Query failed')
              return True
      Runtime: python3.10
      Handler: index.handler
      Timeout: 900
      ReservedConcurrentExecutions: 5
      Role: !GetAtt GluePartitionUpdateLambdaRole.Arn
      Environment:
        Variables:
          GlueConfigTable: !Ref GlueConfigTable
          GlueDatabaseDataCollection: !Ref GlueDatabaseDataCollection

  ConfigPartitionTriggerRule:
  # EB Rule to trigger lambda when config file is delivered 
    Type: "AWS::Events::Rule"
    Properties:
      Description: "Rule to trigger lambda to create partition in GlueConfig Table"
      EventBusName: !Select [1, !Split ["/", !Ref DataCollectionBusArn]]
      EventPattern:
        source:
          - aws.config
        detail-type:
          - Config Configuration Snapshot Delivery Status
        detail:
          messageType:
            - ConfigurationSnapshotDeliveryCompleted
      Targets:
        - Arn: !GetAtt GluePartitionUpdateLambda.Arn
          Id: "LambaasTarget"

  GluePartitionUpdateLambdaPermissions:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt GluePartitionUpdateLambda.Arn
      Principal: events.amazonaws.com
      SourceArn: !GetAtt ConfigPartitionTriggerRule.Arn