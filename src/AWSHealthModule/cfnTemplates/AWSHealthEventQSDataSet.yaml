AWSTemplateFormatVersion: '2010-09-09'
Description: (AwsHealthEvents) Stack to create dataset and GlueTables for AwsHealthEvents

Parameters:
  # S3 Bucket for ingestion
  DataCollectionBucket:
    Type: String
    Description: S3 Bucket Where Kinesis creates health data
  QuicksightServiceRole:
    Type: String
    Default: aws-quicksight-service-role-v0
    Description: The Quicksight Service role attached to QS, Default is aws-quicksight-service-role-v0
  QuickSightUser:
    Type: String
    Description: The QuickSight User that is allowed configure and manage the QS dashboard.
 
Resources:
  AthenaDatabase:
    # AWS Glue Database resource to store the Athena table and view
    Type: AWS::Glue::Database
    Properties:
      CatalogId: !Sub '${AWS::AccountId}'
      DatabaseInput:
        Name: awshealtheventdb
        Description: AWSHealthEventDB

  GlueTableAccountMap:
    Type: AWS::Glue::Table
    Properties:
      DatabaseName: !Ref AthenaDatabase
      CatalogId: !Sub '${AWS::AccountId}'
      TableInput:
        Name: awshealtheventaccinfo
        Description: AWS Health Event Account Data
        Parameters:
          skip.header.line.count: '1'
        TableType: EXTERNAL_TABLE
        StorageDescriptor:
          Columns:
            - { Name: accountid, Type: string }
            - { Name: arn, Type: string }
            - { Name: email, Type: string }
            - { Name: name, Type: string }
            - { Name: status, Type: string }
            - { Name: joinedmethod, Type: string }
            - { Name: joinedtimestamp, Type: string }
            - { Name: Tag, Type: string }
          Location: !Sub 's3://${DataCollectionBucket}/DataCollection-metadata/AWSHealthModule/accountinfo-metadata/'
          InputFormat: org.apache.hadoop.mapred.TextInputFormat
          OutputFormat: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat
          SerdeInfo:
            SerializationLibrary: org.apache.hadoop.hive.serde2.OpenCSVSerde
            Parameters:
              separatorChar: ","
              quoteChar: "\""
              escapeChar: "\\"
              columns: "accountid,arn,email,name,status,joinedmethod,joinedtimestamp"
        PartitionKeys: []

  # AWS Glue Table resource representing the Athena External Table
  GlueTable:
    Type: AWS::Glue::Table
    Properties:
      # Reference to the AWS Glue Database
      DatabaseName: !Ref AthenaDatabase
      CatalogId: !Sub '${AWS::AccountId}'
      TableInput:
        Name: awshealthevent
        Description: 'AWS Health Events Data'
        Owner: GlueTeam
        PartitionKeys:
          - Name: date_created
            Type: string
          - Name: source_partition 
            Type: string
        Parameters:
          EXTERNAL: 'TRUE'  # 'EXTERNAL' should be a string
          projection.enabled: 'true'
          projection.date_created.type: 'date'
          projection.date_created.format: 'yyyy/MM/dd'
          projection.date_created.interval: '1'
          projection.date_created.interval.unit: 'DAYS'
          projection.date_created.range: '2021/01/01,NOW'
          projection.source_partition.type: 'enum'
          projection.source_partition.values: 'awshealthtest,aws.health'
          storage.location.template: !Join ['', ['s3://', !Ref DataCollectionBucket, '/DataCollection-data/${source_partition}/${date_created}/']]

        StorageDescriptor:
          # Columns and their data types for the table
          Columns:
            - Name: version
              Type: string
              Comment: 'from deserializer'
            - Name: id
              Type: string
              Comment: 'from deserializer'
            - Name: detail-type
              Type: string
              Comment: 'from deserializer'
            - Name: source
              Type: string
              Comment: 'from deserializer'
            - Name: account
              Type: string
              Comment: 'from deserializer'
            - Name: time
              Type: string
              Comment: 'from deserializer'
            - Name: region
              Type: string
              Comment: 'from deserializer'
            - Name: resources
              Type: array<string>
              Comment: 'from deserializer'
            - Name: detail
              Type: struct<eventarn:string,service:string,eventscopecode:string,communicationid:string,lastupdatedtime:string,eventregion:string,eventtypecode:string,eventtypecategory:string,starttime:string,endtime:string,eventdescription:array<struct<language:string,latestdescription:string>>,affectedentities:array<struct<entityvalue:string>>>
              Comment: 'from deserializer'
          # S3 location of the data for the Athena External Table
          Location: !Sub 's3://${DataCollectionBucket}/DataCollection-data'
          InputFormat: 'org.apache.hadoop.mapred.TextInputFormat'
          OutputFormat: 'org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat'
          SerdeInfo:
            SerializationLibrary: 'org.openx.data.jsonserde.JsonSerDe'
            Parameters:
              paths: 'account,detail,detail-type,id,region,resources,source,time,version'
          Compressed: false
        TableType: EXTERNAL_TABLE
        Retention: 30

  # Create an AWS IAM Managed Policy for QuickSight service role with necessary permissions     
  QuicksightServiceRolePolicy:
    Type: AWS::IAM::ManagedPolicy
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W13
            reason: "Requires generic access for QS to list all buckets"
    Properties:
      Description: "Grants Amazon QuickSight to run awshealthevent federated query"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Action:
              - s3:ListAllMyBuckets
            Resource: "*"
          - Effect: "Allow"
            Action:
              - "s3:GetBucketLocation"
              - "s3:GetObject"
              - "s3:ListBucket"
              - "s3:ListBucketMultipartUploads"
              - "s3:AbortMultipartUpload"
              - "s3:PutObject"
              - "s3:ListMultipartUploadParts"
              - "s3:CreateBucket"
            Resource: 
              - !Sub arn:aws:s3:::${DataCollectionBucket}
              - !Sub arn:aws:s3:::${DataCollectionBucket}/*
              - arn:aws:s3:::aws-athena-query-results-*
              - arn:aws:s3:::aws-athena-query-results-*/*
          - Effect: "Allow"
            Action:
              - athena:BatchGetQueryExecution
              - athena:CancelQueryExecution
              - athena:GetCatalogs
              - athena:GetExecutionEngine
              - athena:GetExecutionEngines
              - athena:GetNamespace
              - athena:GetNamespaces
              - athena:GetQueryExecution
              - athena:GetQueryExecutions
              - athena:GetQueryResults
              - athena:GetQueryResultsStream
              - athena:GetTable
              - athena:GetTables
              - athena:ListQueryExecutions
              - athena:RunQuery
              - athena:StartQueryExecution
              - athena:StopQueryExecution
              - athena:ListWorkGroups
              - athena:ListEngineVersions
              - athena:GetWorkGroup
              - athena:GetDataCatalog
              - athena:GetDatabase
              - athena:GetTableMetadata
              - athena:ListDataCatalogs
              - athena:ListDatabases
              - athena:ListTableMetadata
            Resource: "*"
          - Effect: "Allow"
            Action:
              - "glue:CreateDatabase"
              - "glue:DeleteDatabase"
              - "glue:GetDatabase"
              - "glue:GetDatabases"
              - "glue:UpdateDatabase"
              - "glue:CreateTable"
              - "glue:DeleteTable"
              - "glue:BatchDeleteTable"
              - "glue:UpdateTable"
              - "glue:GetTable"
              - "glue:GetTables"
              - "glue:BatchCreatePartition"
              - "glue:CreatePartition"
              - "glue:DeletePartition"
              - "glue:BatchDeletePartition"
              - "glue:UpdatePartition"
              - "glue:GetPartition"
              - "glue:GetPartitions"
              - "glue:BatchGetPartition"
            Resource:
              - "*"
          - Effect: "Allow"
            Action:
              - "lakeformation:GetDataAccess"
            Resource:
              - "*"
      Roles: 
       - !Ref QuicksightServiceRole

# Create an AWS QuickSight DataSource for AWS Health events
  AWSHealthEventQSDataSource:
    Type: AWS::QuickSight::DataSource
    DependsOn: QuicksightServiceRolePolicy
    Properties:
      DataSourceId: !Sub "AWSHealthEvent-${AWS::AccountId}-${AWS::Region}"
      AwsAccountId: !Sub ${AWS::AccountId}
      Name: !Sub "AWSHealthEvent-${AWS::AccountId}-${AWS::Region}"
      Type: ATHENA
      DataSourceParameters:
        AthenaParameters:
          WorkGroup: primary
      SslProperties:
        DisableSsl: false

# Create an AWS QuickSight DataSet for AWS Health events
  AWSHealthEventQuickSightDataSet:
      Type: AWS::QuickSight::DataSet
      Properties:
        AwsAccountId: !Sub ${AWS::AccountId}
        ImportMode: SPICE
        DataSetId: !Sub "awshealthevents-${AWS::AccountId}-${AWS::Region}"
        Name: !Sub "awshealthevents-${AWS::AccountId}-${AWS::Region}"
        PhysicalTableMap:
          "AWSHealthQSPT":
            CustomSql:
              DataSourceArn: !GetAtt AWSHealthEventQSDataSource.Arn
              Name: !Sub "awshealthevents-${AWS::AccountId}-${AWS::Region}"
              SqlQuery: |-
                SELECT
                  detail.eventTypeCode
                , ROW_NUMBER() OVER(PARTITION BY detail.eventarn ORDER BY "time" DESC) rowrank
                , source eventSource
                , account
                , CASE WHEN "name" IS NULL THEN "account" ELSE "name" END AS accountName
                , Tag as accountTag
                , detail.service
                , detail.eventScopeCode
                , detail.eventTypeCategory
                , detail.eventArn
                , detail.communicationid
                , detail.eventRegion
                , detail.eventdescription[1].latestdescription eventDescription
                , array_join(transform(detail.affectedEntities, (x) -> x.entityValue), ', ') affectedEntities
                , array_join(resources, ', ') resources
                , CAST(from_iso8601_timestamp("time") AS timestamp) ingestionTime
                , CAST(date_parse(detail.endTime, '%a, %e %b %Y %H:%i:%s GMT') AS timestamp) endTime
                , CAST(date_parse(detail.startTime, '%a, %e %b %Y %H:%i:%s GMT') AS timestamp) startTime
                , CAST(date_parse(detail.lastUpdatedTime, '%a, %e %b %Y %H:%i:%s GMT') AS timestamp) lastUpdatedTime
                , CAST(DATE_DIFF('HOUR', CAST(date_parse(detail.startTime, '%a, %e %b %Y %H:%i:%s GMT') AS timestamp), CAST(date_parse(detail.endTime, '%a, %e %b %Y %H:%i:%s GMT') AS timestamp)) AS BIGINT) "eventDuration"
                , (CASE WHEN (CAST(date_parse(detail.endTime, '%a, %e %b %Y %H:%i:%s GMT') AS timestamp) > current_timestamp) THEN 'Upcoming' WHEN ((CAST(date_parse(detail.endTime, '%a, %e %b %Y %H:%i:%s GMT') AS timestamp) IS NULL) AND (detail.eventTypeCategory = 'scheduledChange')) THEN 'Upcoming' WHEN (((CAST(date_parse(detail.startTime, '%a, %e %b %Y %H:%i:%s GMT') AS timestamp) + (7 * INTERVAL  '1' DAY)) < current_timestamp) AND (detail.eventTypeCategory = 'accountNotification') AND (CAST(date_parse(detail.endTime, '%a, %e %b %Y %H:%i:%s GMT') AS timestamp) IS NULL)) THEN 'Archived' WHEN (CAST(date_parse(detail.endTime, '%a, %e %b %Y %H:%i:%s GMT') AS timestamp) IS NULL) THEN 'Active' ELSE 'Archived' END) "Status"
                FROM
                  "AwsDataCatalog"."awshealtheventdb"."awshealthevent" detail  left outer JOIN
                  "AwsDataCatalog"."awshealtheventdb"."awshealtheventaccinfo" accountinfo
                ON
                  detail.account = accountinfo."accountid"
              Columns:
              - Name: eventTypeCode
                Type: STRING
              - Name: rowrank
                Type: INTEGER
              - Name: eventSource
                Type: STRING
              - Name: account
                Type: STRING
              - Name: eventScopeCode
                Type: STRING
              - Name: eventTypeCategory
                Type: STRING
              - Name: eventArn
                Type: STRING
              - Name: communicationid
                Type: STRING
              - Name: eventDescription
                Type: STRING
              - Name: affectedEntities
                Type: STRING
              - Name: resources
                Type: STRING
              - Name: ingestionTime
                Type: DATETIME
              - Name: endTime
                Type: DATETIME
              - Name: startTime
                Type: DATETIME
              - Name: lastUpdatedTime
                Type: DATETIME
              - Name: eventDuration
                Type: INTEGER
              - Name: Status
                Type: STRING
              - Name: eventRegion
                Type: STRING
              - Name: service
                Type: STRING
              - Name: accountName
                Type: STRING
              - Name: accountTag
                Type: STRING
        LogicalTableMap:
          AWSHealthQSLT:
            Alias: !Sub "awshealthevents-${AWS::AccountId}-${AWS::Region}"
            DataTransforms:
            - FilterOperation:
                ConditionExpression: "{rowrank}=1.0"
            - ProjectOperation:
                ProjectedColumns:
                - eventTypeCode
                - rowrank
                - eventSource
                - account
                - eventScopeCode
                - eventTypeCategory
                - eventArn
                - communicationid
                - eventDescription
                - affectedEntities
                - resources
                - ingestionTime
                - endTime
                - startTime
                - lastUpdatedTime
                - eventDuration
                - Status
                - eventRegion
                - service
                - accountName
                - accountTag
            Source:
              PhysicalTableId: AWSHealthQSPT
        Permissions:
        - Principal: !Sub "${QuickSightUser}"
          Actions:
            - quicksight:DescribeDataSet
            - quicksight:DescribeDataSetPermissions
            - quicksight:PassDataSet
            - quicksight:DescribeIngestion
            - quicksight:ListIngestions
            - quicksight:UpdateDataSet
            - quicksight:DeleteDataSet
            - quicksight:CreateIngestion
            - quicksight:CancelIngestion
            - quicksight:UpdateDataSetPermissions

  # Create an AWS QuickSight Refresh Schedule for AWS Health events
  AWSHealthEventQSDataSetRefresh:
    DependsOn: AWSHealthEventQuickSightDataSet
    Type: AWS::QuickSight::RefreshSchedule
    Properties: 
      AwsAccountId: !Sub ${AWS::AccountId}
      DataSetId: !Sub "awshealthevents-${AWS::AccountId}-${AWS::Region}"
      Schedule:
        RefreshType: FULL_REFRESH
        ScheduleFrequency:
          Interval: HOURLY
        ScheduleId: AWSHealthEventQSDataSetRefresh

Outputs:
  AWSHealthEventQuickSightDataSetArn:
    Value: !GetAtt AWSHealthEventQuickSightDataSet.Arn
    Export:
      Name: AWSHealthEventQuickSightDataSetArn