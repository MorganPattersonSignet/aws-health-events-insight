AWSTemplateFormatVersion: '2010-09-09'
Parameters:
  DynamoDBArn:
    Type: String
    Description: DDB arn
  EventHealthBusArn:
    Type: String
    Description: EventHealthBusArn
  SageMakerEndpoint:
    Type: String
    Description: Sagemaker endpoint for summarization model
  targetLang:
    Type: String
    Description: Target language code(e.g. for English, en )

Resources:
  EventHealthLambdaForDDBRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "EventHealthLambdaForDDBRole-${AWS::AccountId}-${AWS::Region}"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole 
      Policies:
        - PolicyName: cloudwatch-logs-access
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "*"
        - PolicyName: AwshealtheventDDB-access
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:*
                Resource: !Ref DynamoDBArn
        - PolicyName: DescribeAccounts-Access
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - organizations:DescribeAccount
                Resource: "*"
        - PolicyName: AwshealtheventSendEvent-access
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - "events:PutEvents"
                Resource: !Ref EventHealthBusArn
        - PolicyName: Translate
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - translate:TranslateText
                Resource: "*"
        - !If
          - SageMakerEndpoint
          - PolicyName: SagemakerModelAccess
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - "sagemaker:InvokeEndpoint"
                    - "sagemaker:InvokeEndpointAsync"
                  Resource: !Ref SageMakerEndpoint
          - !Ref "AWS::NoValue"
  
  EventHealthLambdaForDDB:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          import json
          import boto3
          import os
          from datetime import datetime

          dynamodb = boto3.resource('dynamodb')

          def process_event_data(event, event_detail):
              event_data = {
                'eventArn': event_detail.get('eventArn'),
                'service': event_detail.get('service',''),
                'eventScopeCode': event_detail.get('eventScopeCode',''),
                'eventRegion': event_detail.get('eventRegion',''),
                'eventTypeCode': event_detail.get('eventTypeCode',''),
                'eventTypeCategory': event_detail.get('eventTypeCategory',''),
                'startTime': datetime.strptime(event_detail.get('startTime', ''), '%a, %d %b %Y %H:%M:%S %Z').strftime('%d/%m/%Y %H:%M:%S')  if event_detail.get('startTime') else '',
                'eventDescription': event_detail.get('eventDescription', [{'latestDescription': None}])[0]['latestDescription'],
                'affectedEntities': ', '.join([entity['entityValue'] for entity in event_detail.get('affectedEntities', [])])
              }
              if event_detail.get('account'):
                event_data['account'] = event_detail.get('account')
              else:
                event_data['account'] = event.get('account')
              event_data['ingestionTime'] = datetime.strptime(event.get('time'), '%Y-%m-%dT%H:%M:%SZ').strftime('%d/%m/%Y %H:%M:%S')
              if event_detail.get('endTime'):
                event_data['endTime'] = datetime.strptime(event_detail['endTime'], '%a, %d %b %Y %H:%M:%S %Z').strftime('%d/%m/%Y %H:%M:%S')
              if event_detail.get('lastUpdatedTime'):
                event_data['lastUpdatedTime'] = datetime.strptime(event_detail['lastUpdatedTime'], '%a, %d %b %Y %H:%M:%S %Z').strftime('%d/%m/%Y %H:%M:%S') 
              else:
                event_data['lastUpdatedTime'] = datetime.strptime(event_detail['startTime'], '%a, %d %b %Y %H:%M:%S %Z').strftime('%d/%m/%Y %H:%M:%S') 

              return event_data

          def summarize_event_description(event_data):
              try:
                      sagemaker_endpoint_arn = os.environ['SageMakerEndpoint']
                      sagemaker_endpoint_name = sagemaker_endpoint_arn.split('/')[-1]  # Extract the name from the ARN
                      sagemaker_endpoint_region = sagemaker_endpoint_arn.split(':')[3]
                      sagemaker_runtime = boto3.client('sagemaker-runtime', sagemaker_endpoint_region)  # Initialize SageMaker client
                      model_max_length = 1000  # Adjust the desired maximum length
                      summary_text = sagemaker_runtime.invoke_endpoint(
                          EndpointName=sagemaker_endpoint_name,
                          Body=bytes(event_data['eventDescription'][:model_max_length], 'utf-8'),
                          ContentType='application/x-text'
                      )['Body'].read().decode('utf-8')
                      event_data['eventSummary'] = json.loads(summary_text)["summary_text"]
              except Exception as e:
                  event_data['eventSummary'] = "LLM Supplied but not reachable, Failing Summarizations Silently"

          def translate_text(event_data, targetLang):
              # Create a client for the Amazon Translate service
              translate = boto3.client('translate')
              # Translate the text
              try:
                  eventDescription = translate.translate_text(Text=event_data['eventDescription'], SourceLanguageCode='en', TargetLanguageCode=targetLang)
                  event_data['eventDescription'] = eventDescription["TranslatedText"]
                  if 'eventSummary' in event_data:
                      eventSummary = translate.translate_text(Text=event_data['eventSummary'], SourceLanguageCode='en', TargetLanguageCode=targetLang)
                      event_data['eventSummary'] = eventSummary["TranslatedText"]
              except Exception as e:
                  print(e)
                  pass
                  
          def save_event_data(table, event_data):
              table.put_item(Item=event_data)

          def get_account_name(event, event_data):
              org_client = boto3.client('organizations')
              try:
                  account_id = event.get('account')
                  event_data['accountName'] = org_client.describe_account(AccountId=account_id).get('Account').get('Name')
              except Exception as e:
                  event_data['accountName'] = account_id
                  print(e)

          def aws_health(event, context):
              event_detail = event['detail']
              table = dynamodb.Table(os.environ['DynamoDBName'])
              event_data = process_event_data(event, event_detail)
              get_account_name(event, event_data)
              if os.environ['SageMakerEndpoint']:
                  summarize_event_description(event_data)
              else:
                  event_data['eventSummary'] = "No LLM Supplied"
              if os.environ.get('targetLang'):
                  translate_text(event_data,os.environ.get('targetLang'))
              save_event_data(table, event_data)
              print(event_data)
              return {'statusCode': 200, 'body': json.dumps('Successfully inserted item into DynamoDB')}

      Handler: index.aws_health
      Runtime: python3.8
      Timeout: 60
      Role: !GetAtt EventHealthLambdaForDDBRole.Arn
      Environment:
        Variables:
          DynamoDBName: !Select [1, !Split ["/", !Ref DynamoDBArn]]
          SageMakerEndpoint: !Ref SageMakerEndpoint
          targetLang: !Ref targetLang
  
  EventHealthtRuleEventHealthBus:
    Type: "AWS::Events::Rule"
    Properties:
      Name: !Sub EventHealthtRuleEventHealthBus-${AWS::AccountId}-${AWS::Region}
      Description: "Event Health bus rule for aws.health events"
      EventBusName: !Select [1, !Split ["/", !Ref EventHealthBusArn]]
      EventPattern:
        source:
          - "aws.health"
          - "awshealthtest"
      Targets:
        - Arn: !GetAtt EventHealthLambdaForDDB.Arn
          Id: "LambaasTarget"

  EventHealthLambdaForDDBPermissions:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt EventHealthLambdaForDDB.Arn
      Principal: events.amazonaws.com
      SourceArn: !GetAtt EventHealthtRuleEventHealthBus.Arn
  
  EventHealthLambdaRunTest:              
    Type: AWS::Lambda::Function
    Properties:
      Code:
          ZipFile: |
            import boto3
            import json
            import cfnresponse
            import os
            eventbridge_client = boto3.client('events')
            def lambda_handler(event, context):
              try:
                event_data = {
                              "eventArn":"arn:aws:health:us-east-1::event/WORKSPACES/AWS_WORKSPACES_MAINTENANCE_SCHEDULED/AWS_WORKSPACES_MAINTENANCE_SCHEDULED_TEST",
                              "service":"WORKSPACES",
                              "eventScopeCode":"ACCOUNT_SPECIFIC",
                              "communicationId":"8f7ef91f0c9f2f3e3f68dffd0fa34fe299e56f323f06154df1de185d0e3f49bf",
                              "lastUpdatedTime":"Wed, 3 May 2023 13:30:55 GMT",
                              "eventRegion":"us-east-1",
                              "eventTypeCode":"AWS_WORKSPACES_MAINTENANCE_SCHEDULED",
                              "eventTypeCategory":"scheduledChange",
                              "startTime":"Wed, 3 May 2023 11:00:00 GMT",
                              "endTime":"Wed, 10 May 2023 14:00:00 GMT",
                              "account":"1234567890",
                              "accountName":"TestAccount",
                              "ingestionTime":"2023-05-22T00:07:57Z",
                              "eventSummary":"Test Event Summary",
                              "eventDescription":[{
                                    "language":"en_US",
                                    "latestDescription":"This is a test AWS Health Event AWS_WORKSPACES_MAINTENANCE_SCHEDULED\n"
                                  }],
                              "affectedEntities":[{
                                    "entityValue":"test-resource"
                                  }]
                            }
                # Send the event to EventBridge
                eventbridge_client.put_events(
                    Entries=[
                        {
                            'Source': 'awshealthtest',
                            'DetailType': 'awshealthtest',
                            'Detail': json.dumps(event_data),
                            'EventBusName': os.environ['EventHealthBusName']
                        }
                    ]
                )
                cfnresponse.send(event, context, cfnresponse.SUCCESS, {}, None)
                return {'statusCode': 200, 'body': 'Success'}
              except Exception as e:
                cfnresponse.send(event, context, cfnresponse.FAILED, {}, None)
                return {'statusCode': 500, 'body': 'Fail'}
      Handler: index.lambda_handler
      Runtime: python3.8
      Timeout: 10
      Role: !GetAtt EventHealthLambdaForDDBRole.Arn
      Environment:
        Variables:
          EventHealthBusName: !Select [1, !Split ["/", !Ref EventHealthBusArn]]

  MyLambdaInvoker:
    Type: AWS::CloudFormation::CustomResource
    DependsOn: EventHealthtRuleEventHealthBus
    Properties:
      ServiceToken: !GetAtt EventHealthLambdaRunTest.Arn

Outputs:
  EventHealthLambdaForDDBRole:
    Value: !GetAtt EventHealthLambdaForDDBRole.Arn
    Export:
      Name: EventHealthLambdaForDDBRole
  EventHealthLambdaForDDB:
    Value: !GetAtt EventHealthLambdaForDDB.Arn
    Export:
      Name: EventHealthLambdaForDDB
  EventHealthtRuleEventHealthBus:
    Value: !GetAtt EventHealthtRuleEventHealthBus.Arn
    Export:
      Name: EventHealthtRuleEventHealthBus

Conditions:
  SageMakerEndpoint: !Not [!Equals [!Ref SageMakerEndpoint, ""]]