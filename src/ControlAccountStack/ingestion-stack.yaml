AWSTemplateFormatVersion: '2010-09-09'
Parameters:
  DynamoDBArn:
    Type: String
    Description: DDB arn
  EventHealthBusArn:
    Type: String
    Description: EventHealthBusArn
  SageMakerEndpoint:
    Type: String
    Description: Sagemaker endpoint for summarization model
  targetLang:
    Type: String
    Description: Target language code(e.g. for English, en )
  S3LocationForLambdaSource:
    Type: String
    Description: S3 Bucket for ingestion lambda source code

Resources:
  EventHealthLambdaForDDBRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "EventHealthLambdaForDDBRole-${AWS::AccountId}-${AWS::Region}"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole 
      Policies:
        - PolicyName: cloudwatch-logs-access
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "*"
        - PolicyName: AwshealtheventDDB-access
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:*
                Resource: !Ref DynamoDBArn
        - PolicyName: DescribeAccounts-Access
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - organizations:DescribeAccount
                Resource: "*"
        - PolicyName: AwshealtheventSendEvent-access
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - "events:PutEvents"
                Resource: !Ref EventHealthBusArn
        - PolicyName: Translate
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - translate:TranslateText
                Resource: "*"
        - !If
          - SageMakerEndpoint
          - PolicyName: SagemakerModelAccess
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - "sagemaker:InvokeEndpoint"
                    - "sagemaker:InvokeEndpointAsync"
                  Resource: !Ref SageMakerEndpoint
          - !Ref "AWS::NoValue"

  EventHealthLambdaForDDB:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Ref LambdaSourceS3Bucket
        S3Key: !Sub "ingestion_lambda.zip"
      Handler: index.aws_health
      Runtime: python3.8
      Timeout: 60
      Role: !GetAtt EventHealthLambdaForDDBRole.Arn
      Environment:
        Variables:
          DynamoDBName: !Select [1, !Split ["/", !Ref DynamoDBArn]]
          SageMakerEndpoint: !Ref SageMakerEndpoint
          targetLang: !Ref targetLang
  
  
  EventHealthtRuleEventHealthBus:
    Type: "AWS::Events::Rule"
    Properties:
      Name: !Sub EventHealthtRuleEventHealthBus-${AWS::AccountId}-${AWS::Region}
      Description: "Event Health bus rule for aws.health events"
      EventBusName: !Select [1, !Split ["/", !Ref EventHealthBusArn]]
      EventPattern:
        source:
          - "aws.health"
          - "awshealthtest"
      Targets:
        - Arn: !GetAtt EventHealthLambdaForDDB.Arn
          Id: "LambaasTarget"

  EventHealthLambdaForDDBPermissions:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt EventHealthLambdaForDDB.Arn
      Principal: events.amazonaws.com
      SourceArn: !GetAtt EventHealthtRuleEventHealthBus.Arn
  
  EventHealthLambdaRunTest:              
    Type: AWS::Lambda::Function
    Properties:
      Code:
          ZipFile: |
            import boto3
            import json
            import cfnresponse
            import os
            eventbridge_client = boto3.client('events')
            def lambda_handler(event, context):
              try:
                event_data = {
                              "eventArn":"arn:aws:health:us-east-1::event/WORKSPACES/AWS_WORKSPACES_MAINTENANCE_SCHEDULED/AWS_WORKSPACES_MAINTENANCE_SCHEDULED_TEST",
                              "service":"WORKSPACES",
                              "eventScopeCode":"ACCOUNT_SPECIFIC",
                              "communicationId":"8f7ef91f0c9f2f3e3f68dffd0fa34fe299e56f323f06154df1de185d0e3f49bf",
                              "lastUpdatedTime":"Wed, 3 May 2023 13:30:55 GMT",
                              "eventRegion":"us-east-1",
                              "eventTypeCode":"AWS_WORKSPACES_MAINTENANCE_SCHEDULED",
                              "eventTypeCategory":"scheduledChange",
                              "startTime":"Wed, 3 May 2023 11:00:00 GMT",
                              "endTime":"Wed, 10 May 2023 14:00:00 GMT",
                              "account":"1234567890",
                              "accountName":"TestAccount",
                              "ingestionTime":"2023-05-22T00:07:57Z",
                              "eventSummary":"Test Event Summary",
                              "eventSource":"mocktest",
                              "eventDescription":[{
                                    "language":"en_US",
                                    "latestDescription":"This is a test AWS Health Event AWS_WORKSPACES_MAINTENANCE_SCHEDULED\n"
                                  }],
                              "affectedEntities":[{
                                    "entityValue":"test-resource"
                                  }]
                            }
                # Send the event to EventBridge
                eventbridge_client.put_events(
                    Entries=[
                        {
                            'Source': 'awshealthtest',
                            'DetailType': 'awshealthtest',
                            'Detail': json.dumps(event_data),
                            'EventBusName': os.environ['EventHealthBusName']
                        }
                    ]
                )
                cfnresponse.send(event, context, cfnresponse.SUCCESS, {}, None)
                return {'statusCode': 200, 'body': 'Success'}
              except Exception as e:
                cfnresponse.send(event, context, cfnresponse.FAILED, {}, None)
                return {'statusCode': 500, 'body': 'Fail'}
      Handler: index.lambda_handler
      Runtime: python3.8
      Timeout: 10
      Role: !GetAtt EventHealthLambdaForDDBRole.Arn
      Environment:
        Variables:
          EventHealthBusName: !Select [1, !Split ["/", !Ref EventHealthBusArn]]

  MyLambdaInvoker:
    Type: AWS::CloudFormation::CustomResource
    DependsOn: EventHealthtRuleEventHealthBus
    Properties:
      ServiceToken: !GetAtt EventHealthLambdaRunTest.Arn

Outputs:
  EventHealthLambdaForDDBRole:
    Value: !GetAtt EventHealthLambdaForDDBRole.Arn
    Export:
      Name: EventHealthLambdaForDDBRole
  EventHealthLambdaForDDB:
    Value: !GetAtt EventHealthLambdaForDDB.Arn
    Export:
      Name: EventHealthLambdaForDDB
  EventHealthtRuleEventHealthBus:
    Value: !GetAtt EventHealthtRuleEventHealthBus.Arn
    Export:
      Name: EventHealthtRuleEventHealthBus

Conditions:
  SageMakerEndpoint: !Not [!Equals [!Ref SageMakerEndpoint, ""]]